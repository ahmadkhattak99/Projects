class SpreadSheet:
    def __init__(self):
        self.ss_array = []
        self.selected_item_list = []

    def create_sheet(self, rows, columns):
        for i in range(rows):
            self.ss_array.append([0])
            for j in range(columns):
                self.ss_array[i].append(0)

    def goto(self, row, column):
        self.cursor = row, column
        return self.cursor

    def insert(self, row, column, value):
        self.ss_array[row][column] = value
        return self.ss_array

    def delete(self, row, column, value=0):
        self.ss_array[row][column] = value
        return self.ss_array

    def read_value(self):
        print(self.ss_array[self.cursor[0]][self.cursor[1]])

    def select(self, row, column, r_2, c_2):
        for i in range(row, r_2):
            lst = []
            for j in range(column, c_2):
                lst.append(self.ss_array[i][j])
            self.selected_item_list.append(lst)

    def get_selection(self):
        print(self.selected_item_list)

    def sum(self, row, column):
        s = 0
        for i in self.selected_item_list:
            for j in i:
                s += j
        self.ss_array[row][column] = s
        return self.ss_array

    def multiply(self, row, column):
        m = 1
        for i in self.selected_item_list:
            for j in i:
                m *= j
        self.ss_array[row][column] = m
        return self.ss_array

    def avg(self, row, column):
        lst_in_lst = 0
        summation = 0
        for i in self.selected_item_list:
            lst_in_lst += len(i)
            for j in i:
                summation += j
        average = summation / lst_in_lst
        self.ss_array[row][column] = average
        return self.ss_array

    def maximum(self, row, column):
        b = 0
        for i in range(len(ss.selected_item_list)):
            a = max(ss.selected_item_list[i])
            b = max(a, b)
        self.ss_array[row][column] = b
        return self.ss_array

    def printing_sheet(self):
        print(self.ss_array)

    def saving_file(self):
        file = open("The_spread_sheet_file.txt", "w+")
        for i in ss.ss_array:
            file.write(str(i))
        file.close()

    def loading_file(self, file_name):
        open(file_name, "r")


print("Welcome to the SpreadSheet Program")
print("Use the SpreadSheet Commands to continue:")

ss = SpreadSheet()
command_input = str(input("\nEnter command here: "))

while command_input != "Quit":

    if command_input == "CreateSheet":
        r = int(input("Enter Number of rows: "))
        c = int(input("Enter Number of columns: "))
        ss.create_sheet(r, c-1)

    elif command_input == "Goto":
        r = int(input("Enter row: "))
        c = int(input("Enter column: "))
        ss.goto(r-1, c-1)

    elif command_input == "Insert":
        r = int(input("Enter row: "))
        c = int(input("Enter column: "))
        v = int(input("Enter the value to insert: "))
        ss.insert(r-1, c-1, v)

    elif command_input == "Delete":
        r = int(input("Enter row: "))
        c = int(input("Enter column: "))
        ss.delete(r-1, c-1)

    elif command_input == "ReadVal":
        ss.read_value()

    elif command_input == "Select":
        r = int(input("Enter starting row: "))
        c = int(input("Enter starting column: "))
        r2 = int(input("Enter ending row: "))
        c2 = int(input("Enter ending column: "))
        ss.select(r-1, c-1, r2, c2)

    elif command_input == "GetSelection":
        ss.get_selection()

    elif command_input == "Sum":
        r = int(input("Enter row to save the result: "))
        c = int(input("Enter column to save the result: "))
        ss.sum(r-1, c-1)

    elif command_input == "Mul":
        r = int(input("Enter row to save the result: "))
        c = int(input("Enter column to save the result: "))
        ss.multiply(r-1, c-1)

    elif command_input == "Avg":
        r = int(input("Enter row to save the result: "))
        c = int(input("Enter column to save the result: "))
        ss.avg(r-1, c-1)

    elif command_input == "Max":
        r = int(input("Enter row to save the result: "))
        c = int(input("Enter column to save the result: "))
        ss.maximum(r-1, c-1)

    elif command_input == "PrintSheet":
        ss.printing_sheet()

    elif command_input == "Save":
        ss.saving_file()

    elif command_input == "Load":
        file_name = str(input("Enter complete file location: "))
        ss.loading_file(file_name)

    else:
        print("Error: You have entered an invalid command!!!")
    command_input = str(input("\nEnter command here: "))

print("\nThankyou for using the SpreadSheet program")
